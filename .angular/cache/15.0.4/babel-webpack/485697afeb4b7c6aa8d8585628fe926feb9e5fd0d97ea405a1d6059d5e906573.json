{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class authGuardService {\n  constructor(auth, route) {\n    this.auth = auth;\n    this.route = route;\n  }\n  canActivate(route, state) {\n    let isLoggedIn = this.auth.isAuthenticated();\n    if (isLoggedIn) {\n      return true;\n    } else {\n      this.route.navigate(['/']);\n    }\n  }\n}\nauthGuardService.ɵfac = function authGuardService_Factory(t) {\n  return new (t || authGuardService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nauthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: authGuardService,\n  factory: authGuardService.ɵfac\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,gBAAgB;EAEzBC,YAAoBC,IAAgB,EAASC,KAAY;IAArC,SAAI,GAAJD,IAAI;IAAqB,UAAK,GAALC,KAAK;EAAS;EAC5DC,WAAW,CACTD,KAA6B,EAC7BE,KAA0B;IAG3B,IAAIC,UAAU,GAAC,IAAI,CAACJ,IAAI,CAACK,eAAe,EAAE;IAC1C,IAAGD,UAAU,EAAC;MACV,OAAO,IAAI;KACd,MACG;MACA,IAAI,CAACH,KAAK,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;EAG/B;;AAhBUR,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAS,SAAhBT,gBAAgB;AAAA","names":["authGuardService","constructor","auth","route","canActivate","state","isLoggedIn","isAuthenticated","navigate","factory"],"sourceRoot":"","sources":["/home/asplap3275/Desktop/Angular/AngularResttopics/Angular_/src/app/services/guards/authGuard.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class authGuardService implements CanActivate{\n\n    constructor(private auth:AuthService,private route:Router){}\n   canActivate(\n     route: ActivatedRouteSnapshot,\n     state: RouterStateSnapshot\n     ): \n   boolean | Promise<boolean|undefined> |Observable<boolean|undefined>{\n    let isLoggedIn=this.auth.isAuthenticated();\n    if(isLoggedIn){\n        return true;\n    }\n    else{\n        this.route.navigate(['/']);\n    }\n    \n   }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}